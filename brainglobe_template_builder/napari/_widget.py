"""
This module is an example of a barebones QWidget plugin for napari

It implements the Widget specification.
see: https://napari.org/stable/plugins/guides.html?#widgets

Replace code below according to your needs.
"""
from typing import Literal, Union

import numpy as np
from magicgui import magic_factory
from napari.layers import Image
from napari.types import LayerDataTuple
from napari_plugin_engine import napari_hook_implementation


@magic_factory(
    call_button="generate mask",
    gauss_sigma={"widget_type": "FloatSlider", "max": 10, "min": 0, "step": 1},
    threshold_method={"choices": ["triangle", "otsu"]},
    erosion_size={"widget_type": "Slider", "max": 10, "min": 0, "step": 1},
)
def mask_widget(
    image: Image,
    gauss_sigma: float = 3,
    threshold_method: Literal["triangle", "otsu"] = "triangle",
    erosion_size: int = 5,
) -> Union[LayerDataTuple, None]:
    """Threshold image and create a mask for the largest object.

    The mask is generated by applying a Gaussian filter to the image,
    thresholding the smoothed image, keeping only the largest object, and
    eroding the resulting mask.

    Parameters
    ----------
    image : Image
        A napari image layer to threshold.
    gauss_sigma : float
        Standard deviation for Gaussian kernel (in pixels) to smooth image
        before thresholding. Set to 0 to skip smoothing.
    threshold_method : str
        Thresholding method to use. Options are 'triangle' and 'otsu'.
    erosion_size : int
        Size of the erosion footprint (in pixels) to apply to the mask.
        Set to 0 to skip erosion.

    Returns
    -------
    layers : list[LayerDataTuple]
        A list of napari layers to add to the viewer.
        The first layer is the mask, and the second layer is the smoothed
        image (if smoothing was applied).
    """

    if image is not None:
        assert isinstance(image, Image), "image must be a napari Image layer"
    else:
        print("Please select an image layer")
        return None

    from skimage import filters, measure, morphology

    # Apply gaussian filter to image
    if gauss_sigma > 0:
        data_smoothed = filters.gaussian(image.data, sigma=gauss_sigma)
    else:
        data_smoothed = image.data

    # Threshold the (smoothed) image
    if threshold_method == "triangle":
        thresholded = filters.threshold_triangle(data_smoothed)
    elif threshold_method == "otsu":
        thresholded = filters.threshold_otsu(data_smoothed)
    else:
        raise ValueError(f"Unknown thresholding method {threshold_method}")

    binary = data_smoothed > thresholded

    # Keep only the largest object
    labeled_image = measure.label(binary)
    regions = measure.regionprops(labeled_image)
    largest_region = max(regions, key=lambda region: region.area)
    # Create a binary mask for the largest object
    mask = labeled_image == largest_region.label

    # Erode the mask
    if erosion_size > 0:
        mask = morphology.binary_erosion(
            mask, footprint=np.ones((erosion_size,) * image.ndim)
        )

    # return the mask as a napari Labels layer
    return (mask, {"name": f"{image.name}_mask", "opacity": 0.5}, "labels")


@napari_hook_implementation
def napari_experimental_provide_dock_widget():
    return mask_widget
